<?php

/**
 * Page-level module <strong>Outil OSA</strong>
 * 
 * @author Stanislas BOYET <stanislas@boyet.me>
 * 
 * @package osa.module
 * 
 * @description
 * Ce module permet la création de 4 type de contenu :
 * 1. osa_etudiant : fiche étudiant réalisateur
 * 2. osa_client : fiche client
 * 3. osa_affaire : fiche de l'affaire avec toutes les infos
 * 4. osa_document : fiche d'un document relatif à une affaire
 */

include_once 'functions.php';
include_once 'forms.php';

/**
 * Implements hook_node_info().
 * @return array Les nouveaux types de contenus que l'on va pouvoir créer
 */
function osa_node_info() {
  // define our content type info
  $items['osa_affaire'] = array(
    'name' => t('Affaire'),
    'type' => 'osa_affaire',
    'base' => 'osa_affaire',
    'description' => t('Une nouvelle affaire à enregistrer'),
    'has_title' => '1',
    'title_label' => t('Affaire - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );
  $items['osa_client'] = array(
    'name' => t('Client'),
    'type' => 'osa_client',
    'base' => 'osa_client',
    'description' => t('Un nouveau client à enregistrer'),
    'has_title' => '1',
    'title_label' => t('Client - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );
  $items['osa_etudiant'] = array(
    'name' => t('Etudiant'),
    'type' => 'osa_etudiant',
    'base' => 'osa_etudiant',
    'description' => t('Un nouvel <strong>etudiant</strong> à enregistrer'),
    'has_title' => '1',
    'title_label' => t('Etudiant - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );
  $items['osa_document'] = array(
    'name' => t('Document'),
    'type' => 'osa_document',
    'base' => 'osa_document',
    'description' => t('Enregistrer un document à propos d\'une affaire'),
    'has_title' => '1',
    'title_label' => t('Document - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );


  return $items;
}

/**
 * Implements hook_node_validate().
 * @param node $node le node que l'on tente de valider
 * @param form $form le formulaire associé au node que l'on veut valider
 * @param form_stat $form_stat état du formulaire
 */
function osa_node_validate($node, $form, &$form_state) {
  // On vérifie le type de node que l'on valide
  if ($node->type == "osa_affaire") {
    
  }
  elseif ($node->type == 'osa_client') {
    if (isset($node->mail) && !valid_email_address($node->mail)) {
      form_set_error('osa_affaire', t('Veuillez entrer une adresse valide.'), NULL);
    }
  }
  elseif ($node->type == 'osa_etudiant') {
    
  }
  elseif ($node->type == 'osa_document') {
    $listeOfAllAffares = getAllAffaires();
    print $listeOfAllAffares;
  }
  else {
    return;
  }
  // Check to see if email address is formatted correctly
}

/**
 * Implement hook_node_insert()
 */
function osa_node_insert($node) {
  // if we're not inserting one of our own get out of here
  if ($node->type == 'osa_affaire') {
    global $user;
    $nid = $node->nid;
    $uid = $user->uid;

    // Passage des dates en TIMESTAMP pour ajout en BDD.
    // Pour cela, on instancie la classe DateTime en créant nos objets
    // dateDebut, Fin, PremierContact
    // On récupère ensuite une date correctement formaté à l'aide de l'array créé
    // par drupal. On applique à cet object la méthode getTimestamp pour retourner
    // ce qu'on l'on veut : un timestamp en bonne et due forme.


    $dateDebut = new DateTime;
    $dateFin = new DateTime;
    $datePremierContact = new DateTime;

    $dateDebut = date_date_set($dateDebut, $node->dateDebut['year'], $node->dateDebut['month'], $node->dateDebut['day']);
    $dateDebutTS = $dateDebut->getTimestamp();

    $dateFin = date_date_set($dateFin, $node->dateFin['year'], $node->dateFin['month'], $node->dateFin['day']);
    $dateFinTS = $dateFin->getTimestamp();

    $datePremierContact = date_date_set($datePremierContact, $node->datePremierContact['year'], $node->datePremierContact['month'], $node->datePremierContact['day']);
    $datePremierContactTS = $dateDebut->getTimestamp();


    $insert = db_insert('osa_affaire')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idAffaire' => $node->idAffaire,
          'idClient' => $node->idClient,
          'idEtudiant' => $node->idEtudiant,
          'titreAffaire' => $node->titreAffaire,
          'recapitulatif' => $node->recapitulatif,
          'prixHT' => $node->prixHT,
          'tva' => $node->tva,
          'sommeFrais' => $node->sommeFrais,
          'nbJEH' => $node->nbJEH,
          'prixJEH' => $node->prixJEH,
          'pourcentPrevi' => $node->pourcentPrevi,
          'sommeHTPrevi' => $node->sommeHTPrevi,
          'accompte' => $node->accompte,
          'soldeFinal' => $node->soldeFinal,
          'dateDebut' => $dateDebutTS,
          'dateFin' => $dateFinTS,
          'datePremierContact' => $datePremierContactTS,
          'origine' => $node->origine,
          //'chartreQualite' => $node->chartreQualite,
          'statutAffaire' => $node->statutAffaire,
          'domaineAffaire' => $node->domaineAffaire,
          'idCDP' => $node->idCDP))
        ->execute();
  }
  elseif ($node->type == 'osa_client') {

    global $user;
    $nid = $node->nid;
    $uid = $user->uid;

    $insert = db_insert('osa_client')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idClient' => $node->idClient,
          'nomClient' => $node->nomClient,
          'prenomClient' => $node->prenomClient,
          'fonction' => $node->fonction,
          'entreprise' => $node->entreprise,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'commentaire' => $node->commentaire,
        ))
        ->execute();
  }
  elseif ($node->type == 'osa_etudiant') {
    global $user;
    $nid = $node->nid;
    $uid = $user->uid;
    
    $insert = db_insert('osa_etudiant')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idEtudiant' => $node->idEtudiant,
          'nomEtudiant' => $node->nomEtudiant,
          'prenomEtudiant' => $node->prenomEtudiant,
          'insee' => $node->insee,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'dateInscription' => $node->dateInscription,
          'dateCotisation' => $node->dateCotisation,
          'ficheAdhesionRemise' => $node->ficheAdhesionRemise,
          'ficheMembreActifRemise' => $node->ficheMembreActifRemise,
          'paiementCotisationEffectue' => $node->paiementCotisationEffectue,
          'certificatScolariteRemis' => $node->certificatScolariteRemis,
          'attestationSecuSocialeRemise' => $node->attestationSecuSocialeRemise,
          'photocopieCarteIdentiteRemise' => $node->photocopieCarteIdentiteRemise,
        ))
        ->execute();
  }
  elseif ($node->type == 'osa_document') {
    global $user;
    $nid = $node->nid;
    $uid = $user->uid;
    

    $insert = db_insert('osa_document')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
//          'idDocument' => $node->idDocument,
          'idAffaire' => $node->idAffaire,
          'referenceDocument' => $node->referenceDocument,
          'etatDocument' => $node->etatDocument,
          'dateSignature' => $node->dateSignature,
          'dateCommence' => $node->dateCommence,
          'dateTermine' => $node->dateTermine,
          'dateEnvoi' => $node->dateEnvoi,
          'validationPresident' => $node->validationPresident,
        ))
        ->execute();
  }
  else {
    return;
  }
}

/**
 * Implement hook_node_update()
 */
function osa_node_update($node) {
  // if we're not updating one of our own get out of here
  if ($node->type == "osa_affaire") {

    $update = db_update('osa_affaire')
        ->fields(array(
          'idAffaire' => $node->idAffaire,
          'idClient' => $node->idClient,
          'idEtudiant' => $node->idEtudiant,
          'titreAffaire' => $node->titreAffaire,
          'recapitulatif' => $node->recapitulatif,
          'prixHT' => $node->prixHT,
          'tva' => $node->tva,
          'sommeFrais' => $node->sommeFrais,
          'nbJEH' => $node->nbJEH,
          'prixJEH' => $node->prixJEH,
          'pourcentPrevi' => $node->pourcentPrevi,
          'sommeHTPrevi' => $node->sommeHTPrevi,
          'accompte' => $node->accompte,
          'soldeFinal' => $node->soldeFinal,
          'dateDebut' => $node->dateDebut,
          'dateFin' => $node->dateFin,
          'datePremierContact' => $node->datePremierContact,
          'origine' => $node->origine,
          //'chartreQualite' => $node->chartreQualite,
          'statutAffaire' => $node->statutAffaire,
          'domaineAffaire' => $node->domaineAffaire,
          'idCDP' => $node->idCDP,))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
  elseif ($node->type == "osa_client") {
    $update = db_update('osa_client')
        ->fields(array(
          'idClient' => $node->idClient,
          'nomClient' => $node->nomClient,
          'prenomClient' => $node->prenomClient,
          'fonction' => $node->fonction,
          'entreprise' => $node->entreprise,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'commentaire' => $node->commentaire,
        ))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
  elseif ($node->type == "osa_etudiant") {

    $update = db_update('osa_etudiant')
        ->fields(array(
          'idEtudiant' => $node->idEtudiant,
          'nomEtudiant' => $node->nomEtudiant,
          'prenomEtudiant' => $node->prenomEtudiant,
          'insee' => $node->insee,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'dateInscription' => $node->dateInscription,
          'dateCotisation' => $node->dateCotisation,
          'ficheAdhesionRemise' => $node->ficheAdhesionRemise,
          'ficheMembreActifRemise' => $node->ficheMembreActifRemise,
          'paiementCotisationEffectue' => $node->paiementCotisationEffectue,
          'certificatScolariteRemis' => $node->certificatScolariteRemis,
          'attestationSecuSocialeRemise' => $node->attestationSecuSocialeRemise,
          'photocopieCarteIdentiteRemise' => $node->photocopieCarteIdentiteRemise,
        ))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
  elseif ($node->type == "osa_document") {

    $update = db_update('osa_document')
        ->fields(array(
//          'idDocument' => $node->idDocument,
          'idAffaire' => $node->idAffaire,
          'referenceDocument' => $node->referenceDocument,
          'etatDocument' => $node->etatDocument,
          'dateSignature' => $node->dateSignature,
          'dateCommence' => $node->dateCommence,
          'dateTermine' => $node->dateTermine,
          'dateEnvoi' => $node->dateEnvoi,
          'validationPresident' => $node->validationPresident,
        ))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
}




/**
 * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * * * * * * * * * *  VIEW * * * * * * * * * * * * * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * 
 * Implements hook_node_view().
 */



function osa_node_view($node, $view_mode, $langcode) {

  if (($node->type == 'osa_affaire')) {
    // get the data we want to display
    $data = db_select('osa_affaire', 'd')
        ->fields('d', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("d.nid", $node->nid)
        ->execute()
        ->fetchAssoc();

//    $nidAffaire = $data['nid'];
//    $idAffaire = $data['idAffaire'];
//    $idClient = $data['idClient'];
//    $idEtudiant = $data['idEtudiant'];
//    $titreAffaire = $data['titreAffaire'];
//    $recapitulatif = $data['recapitulatif'];
//    $prixHT = $data['prixHT'];
//    $tva = $data['tva'];
//    $sommeFrais = $data['sommeFrais'];
//    $nbJEH = $data['nbJEH'];
//    $prixJEH = $data['prixJEH'];
//    $pourcentPrevi = $data['pourcentPrevi'];
//    $sommeHTPrevi = $data['sommeHTPrevi'];
//    $accompte = $data['accompte'];
//    $soldeFinal = $data['soldeFinal'];
    $dateDebut = $data['dateDebut'];
    $dateFin = $data['dateFin'];
    $datePremierContact = $data['datePremierContact'];
//    $origine = $data['origine'];
//    $chartreQualite = $data['chartreQualite'];
//    $statutAffaire = $data['statutAffaire'];
    
    $affaire = objectToArray($data);

    $affaire['domaineAffaire'] = getVerboseDomaine($affaire['domaineAffaire']);

//    $dateDebutFormat = formatDateFR($dateDebut);
//    $dateFinFormat = formatDateFR($dateFin);
//    $datePremierContactFormat = formatDateFR($datePremierContact);

    
    $datesAffaire = array(
      'debut' => $dateDebutFormat,
      'fin' => $dateFinFormat,
      'premierContact' => $datePremierContactFormat,
    );

    $affaire['dates'] = $datesAffaire;



// fetch the user's name using {osa_data}.uid
    $CDP = db_select('users', 'u')
        ->fields('u', array('name', 'mail'))
        ->condition("u.uid", $affaire['idCDP'])
        ->execute()
        ->fetch();

    $affaire['CDP'] = objectToArray($CDP);


    $document_list = db_select('osa_document', 'u')
        ->fields('u', array(
          'nid',
          'uid',
          'idDocument',
          'idAffaire',
          'referenceDocument',
          'etatDocument',
          'dateSignature',
          'dateCommence',
          'dateTermine',
          'dateEnvoi',
          'validationPresident',))
        ->condition("u.idAffaire", $data['idAffaire'])
        ->execute()
        ->fetchAll();

    $documents = objectToArray($document_list);

    $clientData = db_select('osa_client', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idClient',
          'nomClient',
          'prenomClient',
          'fonction',
          'entreprise',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'commentaire',))
        ->condition("c.idClient", $affaire['idClient'])
        ->execute()
        ->fetchAssoc();

    $client = objectToArray($clientData);

    $etudiantData = db_select('osa_etudiant', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idEtudiant',
          'nomEtudiant',
          'prenomEtudiant',
          'insee',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'dateInscription',
          'dateCotisation',
          'ficheAdhesionRemise',
          'ficheMembreActifRemise',
          'paiementCotisationEffectue',
          'certificatScolariteRemis',
          'attestationSecuSocialeRemise',
          'photocopieCarteIdentiteRemise',))
        ->condition("c.idEtudiant", $affaire['idEtudiant'])
        ->execute()
        ->fetchAssoc();

    $etudiant = objectToArray($etudiantData);

    $ficheAdhesionRemise = $etudiantData['ficheAdhesionRemise'];
    $ficheMembreActifRemise = $etudiantData['ficheMembreActifRemise'];
    $paiementCotisationEffectue = $etudiantData['paiementCotisationEffectue'];
    $certificatScolariteRemis = $etudiantData['certificatScolariteRemis'];
    $attestationSecuSocialeRemise = $etudiantData['attestationSecuSocialeRemise'];
    $photocopieCarteIdentiteRemise = $etudiantData['photocopieCarteIdentiteRemise'];

    $etudiant['documents'] = array(
      $ficheAdhesionRemise, $ficheMembreActifRemise,
      $paiementCotisationEffectue, $certificatScolariteRemis,
      $attestationSecuSocialeRemise, $photocopieCarteIdentiteRemise
    );



    // add what we want to the node content area

    $node->content['client'] = $client;

    $node->content['etudiant'] = $etudiant;

    $node->content['documents'] = $documents;

    $node->content['affaire'] = $affaire;

    $node->content['datesAffaire'] = $datesAffaire;
    
  }
  elseif ($node->type == 'osa_client') {

    $data = db_select('osa_client', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idClient',
          'nomClient',
          'prenomClient',
          'fonction',
          'entreprise',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'commentaire',))
        ->condition("c.nid", $node->nid)
        ->execute()
        ->fetchAssoc();

    $client = objectToArray($data);
    
    
    $dataAffaire = db_select('osa_affaire', 'd')
        ->fields('d', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("d.idClient", $data['idClient'])
        ->execute()
        ->fetchAll();
    
    $affaires = objectToArray($dataAffaire);
    
    foreach ($affaires as $key => $courantAffaire) {
      $affaires[$key]['verboseStatutAffaire'] = getVerboseStatut($courantAffaire['statutAffaire']);
      }
    
    $node->content['client'] = $client;
    $node->content['client']['affaires'] = $affaires;

//    $node->content['pageClient'] = $client;
  }
  elseif ($node->type == 'osa_etudiant') {
    $data = db_select('osa_etudiant', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idEtudiant',
          'nomEtudiant',
          'prenomEtudiant',
          'insee',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'dateInscription',
          'dateCotisation',
          'ficheAdhesionRemise',
          'ficheMembreActifRemise',
          'paiementCotisationEffectue',
          'certificatScolariteRemis',
          'attestationSecuSocialeRemise',
          'photocopieCarteIdentiteRemise',))
        ->condition("c.nid", $node->nid)
        ->execute()
        ->fetchAssoc();

    $dataAffaire = db_select('osa_affaire', 'd')
        ->fields('d', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("d.idEtudiant", $data['idEtudiant'])
        ->execute()
        ->fetchAll();
//

    $ficheAdhesionRemise = $data['ficheAdhesionRemise'];
    $ficheMembreActifRemise = $data['ficheMembreActifRemise'];
    $paiementCotisationEffectue = $data['paiementCotisationEffectue'];
    $certificatScolariteRemis = $data['certificatScolariteRemis'];
    $attestationSecuSocialeRemise = $data['attestationSecuSocialeRemise'];
    $photocopieCarteIdentiteRemise = $data['photocopieCarteIdentiteRemise'];



    $etudiant = objectToArray($data);
    $affaires = objectToArray($dataAffaire);

    
    $etudiant['documents'] = array(
      $ficheAdhesionRemise, $ficheMembreActifRemise,
      $paiementCotisationEffectue, $certificatScolariteRemis,
      $attestationSecuSocialeRemise, $photocopieCarteIdentiteRemise
    );
    
    foreach ($affaires as $key => $courantAffaire) {
      $affaires[$key]['verboseStatutAffaire'] = getVerboseStatut($courantAffaire['statutAffaire']);
      }
    
    $node->content['etudiant'] = $etudiant;
    
    $node->content['etudiant']['affaires'] = $affaires;

    $user_name = db_select('users', 'u')
        ->fields('u', array('name'))
        ->condition("u.uid", $data['uid'])
        ->execute()
        ->fetchField();
  }
  elseif ($node->type == 'osa_document') {
    $data = db_select('osa_document', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idDocument',
          'idAffaire',
          'referenceDocument',
          'etatDocument',
          'dateSignature',
          'dateCommence',
          'dateTermine',
          'dateEnvoi',
          'validationPresident',))
        ->condition("c.nid", $node->nid)
        ->execute()
        ->fetchAssoc();
    // fetch the user's name using {osa_data}.uid
    $user_name = db_select('users', 'u')
        ->fields('u', array('name'))
        ->condition("u.uid", $data['uid'])
        ->execute()
        ->fetchField();

//    $idDocument = $data['idDocument'];
//    $idAffaire = $data['idAffaire'];
//    $referenceDocument = $data['referenceDocument'];
//    $etatDocument = $data['etatDocument'];
    $dateSignature = $data['dateSignature'];
    $dateCommence = $data['dateCommence'];
    $dateTermine = $data['dateTermine'];
    $dateEnvoi = $data['dateEnvoi'];
//    $validationPresident = $data['validationPresident'];


    $dateSignature = formatDateFR($dateSignature);
    $dateCommence = formatDateFR($dateCommence);
    $dateTermine = formatDateFR($dateTermine);


//
    $documents = objectToArray($data);


    $affaireData = db_select('osa_affaire', 'a')
        ->fields('a', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("a.idAffaire", $documents['idAffaire'])
        ->execute()
        ->fetchAssoc();

    $affaire = objectToArray($affaireData);
//    

    $node->content['pageDocument'] = $documents;
    $node->content['pageDocument']['verboseReference'] = getVerboseReference($documents['referenceDocument']);
    $node->content['pageDocumentAffaire'] = $affaire;




//    
//    $node->content['document'] = array(
//      '#markup' => array('Test'),
//    );
  }
  else {
    return;
  }
}

function osa_document_delete($node) {
  db_delete('osa_document')
      ->condition('nid', $node->nid)
      ->execute();
}

function osa_affaire_delete($node) {
  db_delete('osa_affaire')
      ->condition('nid', $node->nid)
      ->execute();
}

function osa_client_delete($node) {
  db_delete('osa_client')
      ->condition('nid', $node->nid)
      ->execute();
}

function osa_etudiant_delete($node) {
  db_delete('osa_etudiant')
      ->condition('nid', $node->nid)
      ->execute();
}

function osa_affaire_permission() {

  $permissions['create osa_affaire'] = array(
    'title' => t('Créer une affaire'),
    'description' => t('Autoriser l\'utilisateur à créer une affaire'),
  );
  $permissions['view osa_affaire'] = array(
    'title' => t('Voir une affaire'),
    'description' => t('Autoriser l\'utilisateur à voir une affaire'),
  );
  $permissions['edit osa_affaire'] = array(
    'title' => t('Éditer une affaire'),
    'description' => t('Autoriser l\'utilisateur à éditer une affaire'),
  );
  $permissions['delete osa_affaire'] = array(
    'title' => t('Supprimer une affaire'),
    'description' => t('Autoriser l\'utilisateur à supprimer une affaire'),
  );

  return $permissions;
}

function osa_affaire_node_access($node, $op, $account) {
  // just in case the $node parameter is not really a node object or
  // the $node->type is one other than our own
  $type = is_string($node) ? $node : $node->type;
  if (!is_object($node) || $type != 'osa_affaire') {
    return NODE_ACCESS_IGNORE;
  }
  switch ($op) {
    case 'create':
      if (user_access('create osa_affaire', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      break;
    case 'update':
      if (user_access('edit osa_affaire', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      break;
    case 'delete':
      if (user_access('delete osa_affaire', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      break;
    case 'view':
      if (user_access('view osa_affaire', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      break;
  }
  // if none of the conditions above are met we will deny access
  return NODE_ACCESS_DENY;
}