<?php

/**
 * Page-level module <strong>Outil OSA</strong>
 * 
 * @author Stanislas BOYET <stanislas@boyet.me>
 * 
 * @package osa.module
 * 
 * @description
 * Ce module permet la création de 4 type de contenu :
 * 1. osa_etudiant : fiche étudiant réalisateur
 * 2. osa_client : fiche client
 * 3. osa_affaire : fiche de l'affaire avec toutes les infos
 * 4. osa_document : fiche d'un document relatif à une affaire
 */
include_once 'functions.php';
include_once 'forms.php';

/**
 * Implements hook_node_info() pour déclarer à drupal les nouveaux types de contenus
 * @return array Les nouveaux types de contenus que l'on va pouvoir créer
 */
function osa_node_info() {

  $items['osa_affaire'] = array(
    'name' => t('Affaire'),
    'type' => 'osa_affaire',
    'base' => 'osa_affaire',
    'description' => t('Une nouvelle affaire à enregistrer'),
    'has_title' => '1',
    'title_label' => t('Affaire - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );
  $items['osa_client'] = array(
    'name' => t('Client'),
    'type' => 'osa_client',
    'base' => 'osa_client',
    'description' => t('Un nouveau client à enregistrer'),
    'has_title' => '1',
    'title_label' => t('Client - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );
  $items['osa_etudiant'] = array(
    'name' => t('Etudiant'),
    'type' => 'osa_etudiant',
    'base' => 'osa_etudiant',
    'description' => t('Un nouvel <strong>etudiant</strong> à enregistrer'),
    'has_title' => '1',
    'title_label' => t('Etudiant - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );
  $items['osa_document'] = array(
    'name' => t('Document'),
    'type' => 'osa_document',
    'base' => 'osa_document',
    'description' => t('Enregistrer un document à propos d\'une affaire'),
    'has_title' => '1',
    'title_label' => t('Document - Système OSA'),
    'has_body' => FALSE,
    'help' => t('Veuillez renseigner tous les champs.'),
    'locked' => TRUE,
  );


  return $items;
}

/**
 * Implements hook_node_validate() pour la validation des formulaires
 * @param node $node le node que l'on tente de valider
 * @param form $form le formulaire associé au node que l'on veut valider
 * @param form_stat $form_state état du formulaire
 */
function osa_node_validate($node, $form, &$form_state) {
  // On vérifie le type de node que l'on valide
  if ($node->type == "osa_affaire") {
    
  }
  elseif ($node->type == 'osa_client') {
    if (isset($node->mail) && !valid_email_address($node->mail)) {
      form_set_error('osa_affaire', t('Veuillez entrer une adresse valide.'), NULL);
    }
  }
  elseif ($node->type == 'osa_etudiant') {
    
  }
  elseif ($node->type == 'osa_document') {

    //On récupère tous les documents de l'affaire
    $getDocuments = db_select('osa_document')
        ->fields('osa_document', array('idAffaire', 'referenceDocument', 'nid'))
        ->condition('idAffaire', $node->idAffaire, '=')
        ->execute()
        ->fetchAll();

    $documents = objectToArray($getDocuments);
    // Pour chaque document récupéré, on s'assure que le nouveau document ne soit pas un doublon
    foreach ($documents as $courantDocument) {
      
      //On s'assure de ne pas prendre en compte dans la liste récupérée en BDD
      // le document que l'on enregistre. Sinon, on ne peut plus les modifier
      // étant donné qu'ils apparaissent déjà en BDD.
      if ($courantDocument['nid'] != $node->nid) {

      // Si c'est un doublon, on throw une erreur avant l'enregistrement en BDD
        if ($courantDocument['referenceDocument'] == $node->referenceDocument) {
          form_set_error('osa_document', 'Un document de ce type est déjà enregistré pour cette affaire. Veuillez le modifier.', NULL);
        }
      }
    }
  }
  else {
    return;
  }
}

/**
 * Implement hook_node_insert() pour enregistrer les données issues des formulaires
 * @param node $node node contenant les informations issues des formulaires
 */
function osa_node_insert($node) {

  // if we're not inserting one of our own get out of here
  if ($node->type == 'osa_affaire') {
    global $user;
    $nid = $node->nid;
    $uid = $user->uid;

    //Génère un alias "osa" afin de pouvoir les classer dans les vues
    //et mieux segmentariser le contenu
    $node->path['alias'] = 'osa/' . $node->nid;


    $insert = db_insert('osa_affaire')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idAffaire' => $node->idAffaire,
          'idClient' => $node->idClient,
          'idEtudiant' => $node->idEtudiant,
          'titreAffaire' => $node->titreAffaire,
          'recapitulatif' => $node->recapitulatif,
          'prixHT' => $node->prixHT,
          'tva' => $node->tva,
          'sommeFrais' => $node->sommeFrais,
          'nbJEH' => $node->nbJEH,
          'prixJEH' => $node->prixJEH,
          'pourcentPrevi' => $node->pourcentPrevi,
          'sommeHTPrevi' => $node->sommeHTPrevi,
          'accompte' => $node->accompte,
          'soldeFinal' => $node->soldeFinal,
          'dateDebut' => $node->dateDebut,
          'dateFin' => $node->dateFin,
          'datePremierContact' => $node->datePremierContact,
          'origine' => $node->origine,
          'statutAffaire' => $node->statutAffaire,
          'domaineAffaire' => $node->domaineAffaire,
          'idCDP' => $node->idCDP))
        ->execute();
  }
  elseif ($node->type == 'osa_client') {

    global $user;
    $nid = $node->nid;
    $uid = $user->uid;
    $node->path['alias'] = 'osa/' . $node->nid;


    $insert = db_insert('osa_client')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idClient' => $node->idClient,
          'nomClient' => $node->nomClient,
          'prenomClient' => $node->prenomClient,
          'fonction' => $node->fonction,
          'entreprise' => $node->entreprise,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'commentaire' => $node->commentaire,
        ))
        ->execute();
  }
  elseif ($node->type == 'osa_etudiant') {
    global $user;
    $nid = $node->nid;
    $uid = $user->uid;
    $node->path['alias'] = 'osa/' . $node->nid;


    $insert = db_insert('osa_etudiant')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idEtudiant' => $node->idEtudiant,
          'nomEtudiant' => $node->nomEtudiant,
          'prenomEtudiant' => $node->prenomEtudiant,
          'insee' => $node->insee,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'dateInscription' => $node->dateInscription,
          'dateCotisation' => $node->dateCotisation,
          'ficheAdhesionRemise' => $node->ficheAdhesionRemise,
          'ficheMembreActifRemise' => $node->ficheMembreActifRemise,
          'paiementCotisationEffectue' => $node->paiementCotisationEffectue,
          'certificatScolariteRemis' => $node->certificatScolariteRemis,
          'attestationSecuSocialeRemise' => $node->attestationSecuSocialeRemise,
          'photocopieCarteIdentiteRemise' => $node->photocopieCarteIdentiteRemise,
        ))
        ->execute();
  }
  elseif ($node->type == 'osa_document') {
    global $user;
    $nid = $node->nid;
    $uid = $user->uid;
    $node->path['alias'] = 'osa/' . $node->nid;

    $insert = db_insert('osa_document')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'idAffaire' => $node->idAffaire,
          'referenceDocument' => $node->referenceDocument,
          'etatDocument' => $node->etatDocument,
          'dateSignature' => $node->dateSignature,
          'dateCommence' => $node->dateCommence,
          'dateTermine' => $node->dateTermine,
          'dateEnvoi' => $node->dateEnvoi,
          'validationPresident' => $node->validationPresident,
        ))
        ->execute();
  }
  else {
    return;
  }
}

/**
 * Implement hook_node_update() pour mettre à jour les données issues des formulaires
 * @param node $node node contenant les informations issues des formulaires
 */
function osa_node_update($node) {
  // if we're not updating one of our own get out of here
  if ($node->type == "osa_affaire") {

    $update = db_update('osa_affaire')
        ->fields(array(
          'idAffaire' => $node->idAffaire,
          'idClient' => $node->idClient,
          'idEtudiant' => $node->idEtudiant,
          'titreAffaire' => $node->titreAffaire,
          'recapitulatif' => $node->recapitulatif,
          'prixHT' => $node->prixHT,
          'tva' => $node->tva,
          'sommeFrais' => $node->sommeFrais,
          'nbJEH' => $node->nbJEH,
          'prixJEH' => $node->prixJEH,
          'pourcentPrevi' => $node->pourcentPrevi,
          'sommeHTPrevi' => $node->sommeHTPrevi,
          'accompte' => $node->accompte,
          'soldeFinal' => $node->soldeFinal,
          'dateDebut' => $node->dateDebut,
          'dateFin' => $node->dateFin,
          'datePremierContact' => $node->datePremierContact,
          'origine' => $node->origine,
          //'chartreQualite' => $node->chartreQualite,
          'statutAffaire' => $node->statutAffaire,
          'domaineAffaire' => $node->domaineAffaire,
          'idCDP' => $node->idCDP,))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
  elseif ($node->type == "osa_client") {
    $update = db_update('osa_client')
        ->fields(array(
          'idClient' => $node->idClient,
          'nomClient' => $node->nomClient,
          'prenomClient' => $node->prenomClient,
          'fonction' => $node->fonction,
          'entreprise' => $node->entreprise,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'commentaire' => $node->commentaire,
        ))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
  elseif ($node->type == "osa_etudiant") {

    $update = db_update('osa_etudiant')
        ->fields(array(
          'idEtudiant' => $node->idEtudiant,
          'nomEtudiant' => $node->nomEtudiant,
          'prenomEtudiant' => $node->prenomEtudiant,
          'insee' => $node->insee,
          'numeroDeVoie' => $node->numeroDeVoie,
          'voie' => $node->voie,
          'codePostal' => $node->codePostal,
          'ville' => $node->ville,
          'mail' => $node->mail,
          'tel' => $node->tel,
          'dateInscription' => $node->dateInscription,
          'dateCotisation' => $node->dateCotisation,
          'ficheAdhesionRemise' => $node->ficheAdhesionRemise,
          'ficheMembreActifRemise' => $node->ficheMembreActifRemise,
          'paiementCotisationEffectue' => $node->paiementCotisationEffectue,
          'certificatScolariteRemis' => $node->certificatScolariteRemis,
          'attestationSecuSocialeRemise' => $node->attestationSecuSocialeRemise,
          'photocopieCarteIdentiteRemise' => $node->photocopieCarteIdentiteRemise,
        ))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
  elseif ($node->type == "osa_document") {

    $update = db_update('osa_document')
        ->fields(array(
          'idAffaire' => $node->idAffaire,
          'referenceDocument' => $node->referenceDocument,
          'etatDocument' => $node->etatDocument,
          'dateSignature' => $node->dateSignature,
          'dateCommence' => $node->dateCommence,
          'dateTermine' => $node->dateTermine,
          'dateEnvoi' => $node->dateEnvoi,
          'validationPresident' => $node->validationPresident,
        ))
        ->condition('nid', $node->nid, '=')
        ->execute();
  }
}

/**
 * Implement hook_node_view() pour passer les informations du controller à la vue
 * @param node $node node contenant les informations issues des formulaires
 * @param view_mode $view_mode type de vue appelée
 * @param langcode $langcode langue du site pour la traduction
 */
function osa_node_view($node, $view_mode, $langcode) {

  if (($node->type == 'osa_affaire')) {
    // get the data we want to display
    $data = db_select('osa_affaire', 'd')
        ->fields('d', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("d.nid", $node->nid)
        ->execute()
        ->fetchAssoc();

    $affaire = objectToArray($data);

    $affaire['domaineAffaire'] = getVerboseDomaine($affaire['domaineAffaire']);

    // Récupération des informations du chef de projet de l'affaire
    $CDP = db_select('users', 'u')
        ->fields('u', array('name', 'mail'))
        ->condition("u.uid", $affaire['idCDP'])
        ->execute()
        ->fetch();

    $affaire['CDP'] = objectToArray($CDP);


    $datesAffaire = array(
      'debut' => getVerboseDate($data['dateDebut']),
      'fin' => getVerboseDate($data['dateFin']),
      'premierContact' => getVerboseDate($data['datePremierContact']),
    );

    $affaire['dates'] = $datesAffaire;

    $document_list = db_select('osa_document', 'u')
        ->fields('u', array(
          'nid',
          'uid',
          'idDocument',
          'idAffaire',
          'referenceDocument',
          'etatDocument',
          'dateSignature',
          'dateCommence',
          'dateTermine',
          'dateEnvoi',
          'validationPresident',))
        ->condition("u.idAffaire", $data['idAffaire'])
        ->execute()
        ->fetchAll();

    $documents = objectToArray($document_list);

    $clientData = db_select('osa_client', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idClient',
          'nomClient',
          'prenomClient',
          'fonction',
          'entreprise',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'commentaire',))
        ->condition("c.idClient", $affaire['idClient'])
        ->execute()
        ->fetchAssoc();

    $client = objectToArray($clientData);

    $etudiantData = db_select('osa_etudiant', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idEtudiant',
          'nomEtudiant',
          'prenomEtudiant',
          'insee',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'dateInscription',
          'dateCotisation',
          'ficheAdhesionRemise',
          'ficheMembreActifRemise',
          'paiementCotisationEffectue',
          'certificatScolariteRemis',
          'attestationSecuSocialeRemise',
          'photocopieCarteIdentiteRemise',))
        ->condition("c.idEtudiant", $affaire['idEtudiant'])
        ->execute()
        ->fetchAssoc();

    $etudiant = objectToArray($etudiantData);

    $ficheAdhesionRemise = $etudiantData['ficheAdhesionRemise'];
    $ficheMembreActifRemise = $etudiantData['ficheMembreActifRemise'];
    $paiementCotisationEffectue = $etudiantData['paiementCotisationEffectue'];
    $certificatScolariteRemis = $etudiantData['certificatScolariteRemis'];
    $attestationSecuSocialeRemise = $etudiantData['attestationSecuSocialeRemise'];
    $photocopieCarteIdentiteRemise = $etudiantData['photocopieCarteIdentiteRemise'];

    $etudiant['documents'] = array(
      $ficheAdhesionRemise, $ficheMembreActifRemise,
      $paiementCotisationEffectue, $certificatScolariteRemis,
      $attestationSecuSocialeRemise, $photocopieCarteIdentiteRemise
    );

    $node->content['client'] = $client;

    $node->content['etudiant'] = $etudiant;

    $node->content['documents'] = $documents;

    $node->content['affaire'] = $affaire;

    $node->content['datesAffaire'] = $datesAffaire;
    
  }
  elseif ($node->type == 'osa_client') {

    $data = db_select('osa_client', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idClient',
          'nomClient',
          'prenomClient',
          'fonction',
          'entreprise',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'commentaire',))
        ->condition("c.nid", $node->nid)
        ->execute()
        ->fetchAssoc();

    $client = objectToArray($data);


    $dataAffaire = db_select('osa_affaire', 'd')
        ->fields('d', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("d.idClient", $data['idClient'])
        ->execute()
        ->fetchAll();

    $affaires = objectToArray($dataAffaire);

    foreach ($affaires as $key => $courantAffaire) {
      $affaires[$key]['verboseStatutAffaire'] = getVerboseStatut($courantAffaire['statutAffaire']);
    }

    $node->content['client'] = $client;
    $node->content['client']['affaires'] = $affaires;
    
  }
  elseif ($node->type == 'osa_etudiant') {
    $data = db_select('osa_etudiant', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idEtudiant',
          'nomEtudiant',
          'prenomEtudiant',
          'insee',
          'numeroDeVoie',
          'voie',
          'codePostal',
          'ville',
          'mail',
          'tel',
          'dateInscription',
          'dateCotisation',
          'ficheAdhesionRemise',
          'ficheMembreActifRemise',
          'paiementCotisationEffectue',
          'certificatScolariteRemis',
          'attestationSecuSocialeRemise',
          'photocopieCarteIdentiteRemise',))
        ->condition("c.nid", $node->nid)
        ->execute()
        ->fetchAssoc();

    $dataAffaire = db_select('osa_affaire', 'd')
        ->fields('d', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("d.idEtudiant", $data['idEtudiant'])
        ->execute()
        ->fetchAll();
    
    $ficheAdhesionRemise = $data['ficheAdhesionRemise'];
    $ficheMembreActifRemise = $data['ficheMembreActifRemise'];
    $paiementCotisationEffectue = $data['paiementCotisationEffectue'];
    $certificatScolariteRemis = $data['certificatScolariteRemis'];
    $attestationSecuSocialeRemise = $data['attestationSecuSocialeRemise'];
    $photocopieCarteIdentiteRemise = $data['photocopieCarteIdentiteRemise'];



    $etudiant = objectToArray($data);
    $affaires = objectToArray($dataAffaire);


    $etudiant['documents'] = array(
      $ficheAdhesionRemise, $ficheMembreActifRemise,
      $paiementCotisationEffectue, $certificatScolariteRemis,
      $attestationSecuSocialeRemise, $photocopieCarteIdentiteRemise
    );

    foreach ($affaires as $key => $courantAffaire) {
      $affaires[$key]['verboseStatutAffaire'] = getVerboseStatut($courantAffaire['statutAffaire']);
    }

    $node->content['etudiant'] = $etudiant;

    $node->content['etudiant']['affaires'] = $affaires;

    $user_name = db_select('users', 'u')
        ->fields('u', array('name'))
        ->condition("u.uid", $data['uid'])
        ->execute()
        ->fetchField();
  }
  elseif ($node->type == 'osa_document') {
    $data = db_select('osa_document', 'c')
        ->fields('c', array(
          'nid',
          'uid',
          'idDocument',
          'idAffaire',
          'referenceDocument',
          'etatDocument',
          'dateSignature',
          'dateCommence',
          'dateTermine',
          'dateEnvoi',
          'validationPresident',))
        ->condition("c.nid", $node->nid)
        ->execute()
        ->fetchAssoc();
    
    $user_name = db_select('users', 'u')
        ->fields('u', array('name'))
        ->condition("u.uid", $data['uid'])
        ->execute()
        ->fetchField();

    $documents = objectToArray($data);


    $affaireData = db_select('osa_affaire', 'a')
        ->fields('a', array(
          'nid',
          'uid',
          'idAffaire',
          'idClient',
          'idEtudiant',
          'titreAffaire',
          'recapitulatif',
          'prixHT',
          'tva',
          'sommeFrais',
          'nbJEH',
          'prixJEH',
          'pourcentPrevi',
          'sommeHTPrevi',
          'accompte',
          'soldeFinal',
          'dateDebut',
          'dateFin',
          'datePremierContact',
          'origine',
          'chartreQualite',
          'statutAffaire',
          'domaineAffaire',
          'idCDP',))
        ->condition("a.idAffaire", $documents['idAffaire'])
        ->execute()
        ->fetchAssoc();

    $affaire = objectToArray($affaireData);

    $datesDocument = array(
      'signature' => getVerboseDate($data['dateSignature']),
      'commence' => getVerboseDate($data['dateCommence']),
      'termine' => getVerboseDate($data['dateTermine']),
      'envoi' => getVerboseDate($data['dateEnvoi']),
    );
    
    $node->content['pageDocument'] = $documents;
    $node->content['pageDocument']['dates'] = $datesDocument;
    $node->content['pageDocument']['verboseReference'] = getVerboseReference($documents['referenceDocument']);
    $node->content['pageDocumentAffaire'] = $affaire;
  }
  else {
    return;
  }
}

/**
 * Fonction appelée lors de la suppression d'un document
 * @param node $node node à supprimer
 */
function osa_document_delete($node) {
  db_delete('osa_document')
      ->condition('nid', $node->nid)
      ->execute();
}


/**
 * Fonction appelée lors de la suppression d'une affaire
 * @param node $node node à supprimer
 */
function osa_affaire_delete($node) {
  db_delete('osa_affaire')
      ->condition('nid', $node->nid)
      ->execute();
}


/**
 * Fonction appelée lors de la suppression d'un client
 * @param node $node node à supprimer
 */
function osa_client_delete($node) {
  db_delete('osa_client')
      ->condition('nid', $node->nid)
      ->execute();
}


/**
 * Fonction appelée lors de la suppression d'un étudiant
 * @param node $node node à supprimer
 */
function osa_etudiant_delete($node) {
  db_delete('osa_etudiant')
      ->condition('nid', $node->nid)
      ->execute();
}